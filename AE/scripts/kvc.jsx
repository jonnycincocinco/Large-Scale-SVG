{        //#################################################################        //        //                  Author of this code: Tyler Swanson        //                  v1.0        //                  All rights reserved 2014        //                  This script allows you to change the keyframe velocity of multiple keyframes without using the graph editor        //        //#################################################################    //Create palette   function ts_KeyframeVelocity(thisObj){      function myScript_buildUI(thisObj){         var myPanel = (thisObj instanceof Panel) ? thisObj : new Window("palette", "KVC", [30, 30, 100, 100], {resizeable:true});         res = "group{orientation:'row',\            myPanel: Panel{type:'panel', text:'',\                    groupPreset: Group{orientation: 'row', alignment:['center','center'], alignChildren:['center','center'],\                        myStaticText: StaticText{text:'Presets*:'},\                        myDropDownList: DropDownList{properties:{characters: 16, spacing: 10}},\                        button2: Button{text:'Add Preset'},\                        button5: Button{text:'Delete Preset'},\                        button3: Button{text:'Set Presets File'},\                        button4: Button{text:'Export Presets'},\                    },\                    groupOne: Group{orientation: 'row', alignment:['right','center'], alignChildren:['right','right'],\                        myStaticText: StaticText{text:'In Speed:'},\                        myEditText: EditText{characters: 4, text:'0'},\                        mySlider:Slider{text:'my slider', minvalue: -1000, maxvalue:1000, value: 0},\                        myStaticText3: StaticText{text:' Out Speed:    '},\                        myEditText3: EditText{characters: 4, text:'0'},\                        mySlider3:Slider{text:'my slider', minvalue: -1000, maxvalue: 1000, value:0},\                    },\                    groupTwo: Group{orientation: 'row',alignment:['right','center'], alignChildren:['right','right'],\                        myStaticText2: StaticText{text:'In Influence:'},\                        myEditText2: EditText{characters:4, text:'66.67'},\                        mySlider2:Slider{text:'my slider',minvalue:0.1, maxvalue:100,value:66.67},\                        myStaticText4: StaticText{text:'Out Influence:'},\                        myEditText4: EditText{characters: 4, text:'66.67'},\                        mySlider4:Slider{text:'my slider', minvalue:0.1, maxvalue:100,value:66.67},\                    },\                    groupThree: Group{orientation: 'row',alignment:['left','center'],\                            b4: Button{text:'Change'},\                            myCheckBox: Checkbox{text:'Lock Continuous'},\                    },\            },\         }";         //Add everything in res to my new panel         myPanel.grp = myPanel.add(res);         //Sizes the dropdown button to be the correct length         myPanel.grp.myPanel.groupPreset.myDropDownList.minimumSize.width = 120;         myPanel.grp.myPanel.groupOne.myEditText.minimumSize.width = 60;         myPanel.grp.myPanel.groupOne.myEditText3.minimumSize.width = 60;         myPanel.grp.myPanel.groupTwo.myEditText4.minimumSize.width = 60;         myPanel.grp.myPanel.groupTwo.myEditText2.minimumSize.width = 60;          //used to serialize and deserialize JSON files using JSON.stringify() and JSON.parse()    //Below is the minified version of json2.json//##################################################################################################################################   var JSON;JSON||(JSON={});(function(){function k(a){return a<10?"0"+a:a}function o(a){p.lastIndex=0;return p.test(a)?'"'+a.replace(p,function(a){var c=r[a];return typeof c==="string"?c:"\\u"+("0000"+a.charCodeAt(0).toString(16)).slice(-4)})+'"':'"'+a+'"'}function l(a,j){var c,d,h,m,g=e,f,b=j[a];b&&typeof b==="object"&&typeof b.toJSON==="function"&&(b=b.toJSON(a));typeof i==="function"&&(b=i.call(j,a,b));switch(typeof b){case "string":return o(b);case "number":return isFinite(b)?String(b):"null";case "boolean":case "null":return String(b);case "object":if(!b)return"null";e+=n;f=[];if(Object.prototype.toString.apply(b)==="[object Array]"){m=b.length;for(c=0;c<m;c+=1)f[c]=l(c,b)||"null";h=f.length===0?"[]":e?"[\n"+e+f.join(",\n"+e)+"\n"+g+"]":"["+f.join(",")+"]";e=g;return h}if(i&&typeof i==="object"){m=i.length;for(c=0;c<m;c+=1)typeof i[c]==="string"&&(d=i[c],(h=l(d,b))&&f.push(o(d)+(e?": ":":")+h))}else for(d in b)Object.prototype.hasOwnProperty.call(b,d)&&(h=l(d,b))&&f.push(o(d)+(e?": ":":")+h);h=f.length===0?"{}":e?"{\n"+e+f.join(",\n"+e)+"\n"+g+"}":"{"+f.join(",")+"}";e=g;return h}}if(typeof Date.prototype.toJSON!=="function")Date.prototype.toJSON=function(){return isFinite(this.valueOf())?this.getUTCFullYear()+"-"+k(this.getUTCMonth()+1)+"-"+k(this.getUTCDate())+"T"+k(this.getUTCHours())+":"+k(this.getUTCMinutes())+":"+k(this.getUTCSeconds())+"Z":null},String.prototype.toJSON=Number.prototype.toJSON=Boolean.prototype.toJSON=function(){return this.valueOf()};var q=/[\u0000\u00ad\u0600-\u0604\u070f\u17b4\u17b5\u200c-\u200f\u2028-\u202f\u2060-\u206f\ufeff\ufff0-\uffff]/g,p=/[\\\"\x00-\x1f\x7f-\x9f\u00ad\u0600-\u0604\u070f\u17b4\u17b5\u200c-\u200f\u2028-\u202f\u2060-\u206f\ufeff\ufff0-\uffff]/g,e,n,r={"\u0008":"\\b","\t":"\\t","\n":"\\n","\u000c":"\\f","\r":"\\r",'"':'\\"',"\\":"\\\\"},i;if(typeof JSON.stringify!=="function")JSON.stringify=function(a,j,c){var d;n=e="";if(typeof c==="number")for(d=0;d<c;d+=1)n+=" ";else typeof c==="string"&&(n=c);if((i=j)&&typeof j!=="function"&&(typeof j!=="object"||typeof j.length!=="number"))throw Error("JSON.stringify");return l("",{"":a})};if(typeof JSON.parse!=="function")JSON.parse=function(a,e){function c(a,d){var g,f,b=a[d];if(b&&typeof b==="object")for(g in b)Object.prototype.hasOwnProperty.call(b,g)&&(f=c(b,g),f!==void 0?b[g]=f:delete b[g]);return e.call(a,d,b)}var d,a=String(a);q.lastIndex=0;q.test(a)&&(a=a.replace(q,function(a){return"\\u"+("0000"+a.charCodeAt(0).toString(16)).slice(-4)}));if(/^[\],:{}\s]*$/.test(a.replace(/\\(?:["\\\/bfnrt]|u[0-9a-fA-F]{4})/g,"@").replace(/"[^"\\\n\r]*"|true|false|null|-?\d+(?:\.\d*)?(?:[eE][+\-]?\d+)?/g,"]").replace(/(?:^|:|,)(?:\s*\[)+/g,"")))return d=eval("("+a+")"),typeof e==="function"?c({"":d},""):d;throw new SyntaxError("JSON.parse");}})();//##################################################################################################################################function isSecurityPrefSet(){   //code from Lloyd Alvarez			var securitySetting = app.preferences.getPrefAsLong("Main Pref Section",							"Pref_SCRIPTING_FILE_NETWORK_SECURITY");			return (securitySetting == 1);		}  //Load presets from AE preferences file saved setting  function loadPresets(){       if (!isSecurityPrefSet()) {			alert("This script requires access to write files.\nGo to the \"General\" panel of the application preferences and make sure \"Allow Scripts to Write Files and Access Network\" is checked.");			app.executeCommand(2359);			if (!isSecurityPrefSet()) return;		}    if(app.settings.haveSetting("KVC - Presets Path", "Path") == true){                //Get the path from the preference file saved setting                var path = app.settings.getSetting("KVC - Presets Path", "Path");               //create file using saved path                var f = new File(path);                try{                    if(f != null){                             f.open("r");                 while(f.eof != true){                            var presetObject = JSON.parse(f.readln());                            var binaryCont = true;                     var isInList = false;                     for(var i = 0; i < presetsArray.length; i++){                                            var array = presetsArray[i];                                            //Check if this preset name has been made already                                            if(presetObject.name.toString() == array[0].toString()){                                                        isInList = true;                                            }                    }                    if(isInList == false){                                //Adds the import to the dropdown and sets the selected name to the imported name                                myPanel.grp.myPanel.groupPreset.myDropDownList.add("item", presetObject.name);                                //Make preset name the selected list item of dropdown                     }                    //Handle continuous checkbox                    if(presetObject.continuous == "true"){                            myPanel.grp.myPanel.groupThree.myCheckBox.value = true;                    }else{                        myPanel.grp.myPanel.groupThree.myCheckBox.value = false;                        binaryCont = false;                    }                    var arrayVal = [presetObject.name, presetObject.inSpeed, presetObject.outSpeed, presetObject.inInfluence, presetObject.outInfluence, binaryCont];                    presetsArray.push(arrayVal);              }              //myPanel.grp.myPanel.groupPreset.myDropDownList.selection = myPanel.grp.myPanel.groupPreset.myDropDownList.items[0];              f.close();                    }else{                    }                    }catch(err){                            alert(err);                    }    }else{   //No presets path saved so we don't populate until they click the save presets file location.    }}//  *****************************************************************Main Script that changes keyframe values *************************************************************** myPanel.grp.myPanel.groupThree.b4.onClick = function(){ //values for the in speed and influencevar inSpeed =   myPanel.grp.myPanel.groupOne.mySlider.value;var inInfluence = myPanel.grp.myPanel.groupTwo.mySlider2.value;//values for the out speed and influencevar outSpeed = myPanel.grp.myPanel.groupOne.mySlider3.value;var outInfluence =myPanel.grp.myPanel.groupTwo.mySlider4.value;//Created KeyframeEase objects to be passed into the keysvar easeIn = new KeyframeEase(inSpeed, inInfluence);var easeOut = new KeyframeEase(outSpeed, outInfluence);//Initialize arrays for selectedLayers, selectedProperties, and selectedKeysvar sL = app.project.activeItem.selectedLayers;var sP;var sK;//Begin undo group so whole thing can be undoneapp.beginUndoGroup("KVC");//For each selected layerfor( var k = sL.length ; k > 0 ; k--){    //Get selected properties of selected layers   var sP = sL[k - 1].selectedProperties;    //For each selected property    for( var j = sP.length ; j > 0; j--){        if(sP[j-1].isMask != true && sP[j-1].isEffect != true){        //Get selected keys        sK = sP[j- 1].selectedKeys;                //For each selected key                for(var i = sK.length ; i > 0 ; i--){                        //Check if TwoD                        if(sP[j-1].propertyValueType == PropertyValueType.TwoD){                                //If true, set speed and influence with correct # of parameters                                sP[j - 1].setTemporalEaseAtKey(sK[sK.length - i], [easeIn, easeIn], [easeOut, easeOut]);                        //Check if ThreeD                        }else if(sP[j-1].propertyValueType == PropertyValueType.ThreeD){                                //If true, set speed and influence with correct # of parameters                                sP[j - 1].setTemporalEaseAtKey(sK[sK.length - i], [easeIn, easeIn, easeIn], [easeOut, easeOut, easeOut]);                        //Check if TwoD_SPATIAL                        }else if(sP[j-1].propertyValueType == PropertyValueType.TwoD_SPATIAL){                                //If true, set speed and influence with correct # of parameters                                sP[j - 1].setTemporalEaseAtKey(sK[sK.length - i], [easeIn], [easeOut]);                        //Check if ThreeDSPATIAL                        }else if(sP[j-1].propertyValueType == PropertyValueType.ThreeD_SPATIAL){                                //If true, set speed and influence with correct # of parameters                                sP[j - 1].setTemporalEaseAtKey(sK[sK.length - i], [easeIn], [easeOut]);                        //Check if OneD                        }else if(sP[j-1].propertyValueType == PropertyValueType.OneD){                                //If true, set speed and influence with correct # of parameters                                sP[j - 1].setTemporalEaseAtKey(sK[sK.length - i], [easeIn], [easeOut]);                        //Check if COLOR                        }else if(sP[j-1].propertyValueType == PropertyValueType.COLOR){                                //If true, set speed and influence with correct # of parameters                                sP[j - 1].setTemporalEaseAtKey(sK[sK.length - i], [easeIn], [easeOut]);                        //Default                        }else if(sP[j-1].propertyValueType == PropertyValueType.NO_VALUE){                                //If true, set speed and influence with correct # of parameters                                writeLn("One of these keyframes has NO_VALUE property value type");                        //Check if COLOR                        }else if(sP[j-1].propertyValueType == PropertyValueType.CUSTOM_VALUE){                                //If true, set speed and influence with correct # of parameters                            sP[j - 1].setTemporalEaseAtKey(sK[sK.length - i], [easeIn], [easeOut]);                        //Check if COLOR                        }else if(sP[j-1].propertyValueType == PropertyValueType.SHAPE){                                //If true, set speed and influence with correct # of parameters                                sP[j - 1].setTemporalEaseAtKey(sK[sK.length - i], [easeIn], [easeOut]);                        //Check if COLOR                        }else{                                writeLn("Not sure what property value type one of these keyframes has");                        }                }        }    }}app.endUndoGroup();    }         //*******************************************************END OF MAIN ************************************************************//Array that holds presets (arrays)var presetsArray = new Array();loadPresets();//onClick for Delete PresetmyPanel.grp.myPanel.groupPreset.button5.onClick = function(){   //get the name of the selected preset  var name = myPanel.grp.myPanel.groupPreset.myDropDownList.selection;  if( name != null){       //ask if they want to delete or not       var proceed = confirm("Are you sure you want to delete this preset?", true, "Delete Preset");       if (proceed == true) {                //if yes, go through and remove it from the dropdown list and the presetsArray                for(var i = 0; i < presetsArray.length; i++){                                    var array = presetsArray[i];                                    //Check if this preset name has been made already                                    if(name.toString() == array[0].toString()){                                                //remove it from array of presets                                                presetsArray.splice(i,1);                                                //remove it from dropdown list                                                myPanel.grp.myPanel.groupPreset.myDropDownList.remove(i);                                                break;                                    }                    }                    //Next we want to remove the preset from the external file we are using by essentially rewriting the file                    var path = app.settings.getSetting("KVC - Presets Path", "Path");                    var myFile = new File(path);                    if(myFile != null){                            try{                            //open file selected from dialogue with "w" (write permission)                            //will overwrite file if content already exists                                myFile.open("w");                                for(var i = 0; i < presetsArray.length; i++){                                        var array = presetsArray[i];                                        var j = 0;                                       // create an object from the array                                        var presetObject = {                                            name: array[j],                                            inSpeed: array[j + 1],                                            outSpeed: array[j + 2],                                            inInfluence: array[j + 3],                                            outInfluence: array[j + 4],                                            continuous: array[j + 5]                                        };                                        /*                                        var name = array[j];                                        var inSpeed = array[j + 1];                                        var outSpeed = array[j + 2];                                        var inInfluence = array[j + 3];                                        var outInfluence = array[j + 4];                                        var continuous = array[j + 5];                                        */                                        var presetObjectString = JSON.stringify(presetObject);                                        //write the stringified preset object to the file.                                        myFile.writeln(presetObjectString);                                 }                            //close file                            myFile.close();                           }catch(err){                                   alert("err");                             }                   }else{                       // alert("File is null");                    }        }else{        }   }else{       // alert(name + " is null");   }}//onClick for Export buttonmyPanel.grp.myPanel.groupPreset.button4.onClick = function(){       //Opens dialogue to save file with example.kvc being the recommended name and extension       var f = new File(Folder.desktop.fsName + "/example.json");       var myFile = f.saveDlg();       if(myFile != null){             try{                    //open file selected from dialogue with "w" (write permission)                    myFile.open("w");                    for(var i = 0; i < presetsArray.length; i++){                                var array = presetsArray[i];                                var j = 0;                                //create preset object from array                                var presetObject = {                                     name: array[j],                                     inSpeed: array[j + 1],                                     outSpeed: array[j + 2],                                     inInfluence: array[j + 3],                                     outInfluence: array[j + 4],                                     continuous: array[j + 5],                                };                                //stringify the presetObject so that we can write it to the file on a single line                                var presetObjectString = JSON.stringify(presetObject);                                //write the preset values to the text file                                myFile.writeln(presetObjectString);                        }                    //close file                    myFile.close();                   }catch(err){                           alert("err");                     }         }else{          }}//OnClick for Set Presets FilemyPanel.grp.myPanel.groupPreset.button3.onClick = function(){        //creates file referebce that has .kvc extension        var f = new File("~/Desktop/example.json");        try{            //looks for a file with that extension            var myFile = f.openDlg();            if(myFile != null){                  var path = myFile.absoluteURI;                  app.settings.saveSetting("KVC - Presets Path", "Path", path);                  presetsArray = [];                  myPanel.grp.myPanel.groupPreset.myDropDownList.removeAll();                 myFile.open("r");                 while(myFile.eof != true){                            var presetObject = JSON.parse(myFile.readln());                            var binaryCont = true;                     var isInList = false;                     for(var i = 0; i < presetsArray.length; i++){                                            var array = presetsArray[i];                                            //Check if this preset name has been made already                                            if(presetObject.name.toString() == array[0].toString()){                                                        isInList = true;                                            }                    }                    if(isInList == false){                                //Adds the import to the dropdown and sets the selected name to the imported name                                myPanel.grp.myPanel.groupPreset.myDropDownList.add("item", presetObject.name);                                //Make preset name the selected list item of dropdown                     }                    //Handle continuous checkbox                    if(presetObject.continuous == "true"){                            myPanel.grp.myPanel.groupThree.myCheckBox.value = true;                    }else{                        myPanel.grp.myPanel.groupThree.myCheckBox.value = false;                        binaryCont = false;                    }                    var arrayVal = [presetObject.name, presetObject.inSpeed, presetObject.outSpeed, presetObject.inInfluence, presetObject.outInfluence, binaryCont];                    presetsArray.push(arrayVal);              }              myPanel.grp.myPanel.groupPreset.myDropDownList.selection = myPanel.grp.myPanel.groupPreset.myDropDownList.items[0];              myFile.close();           }else{           }         }catch(err){               alert(err);         }}//Add preset onClickmyPanel.grp.myPanel.groupPreset.button2.onClick = function(){    var nameExists = true;     //name of preset    var dropName =  myPanel.grp.myPanel.groupPreset.myDropDownList.selection;    //make sure preset is selected    if(dropName == null){        var name = prompt("Please enter the name of your preset", "Preset 01");        while((presetsArray.length == 0) && (name == "")){                alert("Name can't be blank");                name = prompt("Please enter the name of your preset", "Preset 01");         }        if(name != null){        //**********************SAME CODE FROM THE "ADD PRESET" BUTTON ******************************************                      //Check name                          if(presetsArray.length >0){                              //Presets array is not empty so we must see if there is already a similarly named preset                            //Go through presetsArray                            while((nameExists == true) || (name == "")){                                    var isUsed = false;                                    if(name == ""){                                        isUsed = true;                                        alert("Name can't be blank");                                        name = prompt("Please enter the name of your preset", "Preset 01");                                     }                                    for(var i = 0; i < presetsArray.length; i++){                                            var array = presetsArray[i];                                            //Check if this preset name has been made already                                            if(name.toString() == array[0].toString()){                                                isUsed = true;                                                alert("Name already exists");                                                name = prompt("Please enter the name of your preset", "Preset 01");                                            }                                    }                                if(isUsed == false){                                        nameExists = false;                                 }                            }                             if(nameExists == false){                                            myPanel.grp.myPanel.groupPreset.myDropDownList.add("item", name);                                            //Make preset name the selected list item of dropdown                                            //Make the newly created preset the seclected item in the dropdown box                                           var items = myPanel.grp.myPanel.groupPreset.myDropDownList.items;                                           for(var i = 0; i < items.length ; i++){                                                    if(items[i].text == name){                                                            myPanel.grp.myPanel.groupPreset.myDropDownList.selection = myPanel.grp.myPanel.groupPreset.myDropDownList.items[i];                                                     }                                           }                                            // alert( myPanel.grp.myPanel.groupPreset.myDropDownList.selection);                                            var inSpeed = myPanel.grp.myPanel.groupOne.mySlider.value.toFixed(3);                                            var outSpeed = myPanel.grp.myPanel.groupOne.mySlider3.value.toFixed(3);                                            var inInfluence = myPanel.grp.myPanel.groupTwo.mySlider2.value.toFixed(3);                                            var outInfluence = myPanel.grp.myPanel.groupTwo.mySlider4.value.toFixed(3);                                            var continuous = myPanel.grp.myPanel.groupThree.myCheckBox.value;                                            var arrayVals =  [name, inSpeed, outSpeed, inInfluence, outInfluence, continuous];                                            presetsArray.push(arrayVals);                                            //write preset to the file in the saved settings                                            if(app.settings.haveSetting("KVC - Presets Path", "Path") == true){                                                        var path = app.settings.getSetting("KVC - Presets Path", "Path");                                                        var f = new File(path);                                                        try{                                                            if(f != null){                                                                    f.open("w");                                                                     for(var i = 0; i < presetsArray.length; i++){                                                                                var array = presetsArray[i];                                                                                var j = 0;                                                                                presetObject = {                                                                                          name: array[j],                                                                                          inSpeed: array[j + 1],                                                                                          outSpeed: array[j + 2],                                                                                          inInfluence: array[j + 3],                                                                                          outInfluence: array[j + 4],                                                                                          continuous: array[j + 5]                                                                                };                                                                                var presetObjectString = JSON.stringify(presetObject);                                                                                //write the preset values to the text file                                                                                f.writeln(presetObjectString);                                                                       }                                                               }                                                        //close file                                                        f.close();                                                       }catch(err){                                                               alert(err);                                                         }                                           }else{//There isn't a saved preset file                                           }                            }                        }else{ //presetsArray is empty and we can add the preset                            myPanel.grp.myPanel.groupPreset.myDropDownList.add("item", name);                                            //Make preset name the selected list item of dropdown                                        //Make the newly created preset the seclected item in the dropdown box                                        var items = myPanel.grp.myPanel.groupPreset.myDropDownList.items;                                           for(var i = 0; i < items.length ; i++){                                                    if(items[i].text == name){                                                            myPanel.grp.myPanel.groupPreset.myDropDownList.selection = myPanel.grp.myPanel.groupPreset.myDropDownList.items[i];                                                     }                                           }                                            // alert( myPanel.grp.myPanel.groupPreset.myDropDownList.selection);                                            var inSpeed = myPanel.grp.myPanel.groupOne.mySlider.value.toFixed(3);                                            var outSpeed = myPanel.grp.myPanel.groupOne.mySlider3.value.toFixed(3);                                            var inInfluence = myPanel.grp.myPanel.groupTwo.mySlider2.value.toFixed(3);                                            var outInfluence = myPanel.grp.myPanel.groupTwo.mySlider4.value.toFixed(3);                                            var continuous = myPanel.grp.myPanel.groupThree.myCheckBox.value;                                            var arrayVals =  [name, inSpeed, outSpeed, inInfluence, outInfluence, continuous];                                            presetsArray.push(arrayVals);                                               //write preset to the file in the saved settings                                            if(app.settings.haveSetting("KVC - Presets Path", "Path") == true){                                                        var path = app.settings.getSetting("KVC - Presets Path", "Path");                                                        var f = new File(path);                                                        try{                                                            if(f != null){                                                                    f.open("w");                                                                     for(var i = 0; i < presetsArray.length; i++){                                                                                var array = presetsArray[i];                                                                                var j = 0;                                                                                presetObject = {                                                                                         name: array[j],                                                                                         inSpeed: array[j + 1],                                                                                         outSpeed: array[j + 2],                                                                                         inInfluence: array[j + 3],                                                                                         outInfluence: array[j + 4],                                                                                         continuous: array[j + 5]                                                                                };                                                                                var presetObjectString = JSON.stringify(presetObject);                                                                                //write the preset values to the text file                                                                                f.writeln(presetObjectString);                                                                            }                                                                        }                                                        //close file                                                        f.close();                                                       }catch(err){                                                               alert(err);                                                         }                                           }else{//There isn't a saved preset file                                           }                         }//***************************************END OF CHECK ON NAME SO THAT IT GETS ADDED TO LIST OF PRESETS************************       }   }}      //Go through presetsArray when dropdown is changed to a preset and switch the 4 values to that presetmyPanel.grp.myPanel.groupPreset.myDropDownList.onChange = function(){                for(var i = 0; i < presetsArray.length; i++){                        var array = presetsArray[i];                        if(myPanel.grp.myPanel.groupPreset.myDropDownList.selection.toString() === array[0].toString()){                                myPanel.grp.myPanel.groupOne.mySlider.value = array[1];                                myPanel.grp.myPanel.groupOne.myEditText.text = array[1].toString();                                myPanel.grp.myPanel.groupOne.mySlider3.value = array[2];                                myPanel.grp.myPanel.groupOne.myEditText3.text = array[2].toString();                                myPanel.grp.myPanel.groupTwo.mySlider2.value = array[3];                                myPanel.grp.myPanel.groupTwo.myEditText2.text = array[3].toString();                                myPanel.grp.myPanel.groupTwo.mySlider4.value = array[4];                                myPanel.grp.myPanel.groupTwo.myEditText4.text = array[4].toString();                                myPanel.grp.myPanel.groupThree.myCheckBox.value = array[5];                           }                }       }   //################   The below methods are for the GUI checkbox/dropdownlist/edit text fields/ sliders  and their onClick actions    ##############      //CheckBox for Continuous ( Changes the out speed to be the same as the in speed      myPanel.grp.myPanel.groupThree.myCheckBox.onClick=function(){                    //reset the presets dropdown to null                   myPanel.grp.myPanel.groupPreset.myDropDownList.selection = null;                    var contLocked = myPanel.grp.myPanel.groupThree.myCheckBox.value;                    if(contLocked == true){                                myPanel.grp.myPanel.groupOne.mySlider3.value = myPanel.grp.myPanel.groupOne.mySlider.value;                                myPanel.grp.myPanel.groupOne.myEditText3.text =  myPanel.grp.myPanel.groupOne.myEditText.text;                    }       }      //In Speed Slider       myPanel.grp.myPanel.groupOne.mySlider.onChange = function(){                    //reset the presets dropdown to null                   myPanel.grp.myPanel.groupPreset.myDropDownList.selection = null;                    var Val = myPanel.grp.myPanel.groupOne.mySlider.value.toFixed(3);                    myPanel.grp.myPanel.groupOne.myEditText.text = Val;                    //Make text fields the same if continuous is locked                    var contLocked = myPanel.grp.myPanel.groupThree.myCheckBox.value;                    if(contLocked == true){                                myPanel.grp.myPanel.groupOne.mySlider3.value = myPanel.grp.myPanel.groupOne.mySlider.value;                                 myPanel.grp.myPanel.groupOne.myEditText3.text =  myPanel.grp.myPanel.groupOne.myEditText.text;                    }           }       //In Speed Text Field       myPanel.grp.myPanel.groupOne.myEditText.onChange = function(){                    //reset the presets dropdown to null                   myPanel.grp.myPanel.groupPreset.myDropDownList.selection = null;                    var Val =(parseFloat(myPanel.grp.myPanel.groupOne.myEditText.text)).toFixed(3);                      if(Val < -1000){                         myPanel.grp.myPanel.groupOne.mySlider.value = -1000;                         myPanel.grp.myPanel.groupOne.myEditText.text = "-1000";                    }else if(Val > 1000){                         myPanel.grp.myPanel.groupOne.mySlider.value = 1000;                         myPanel.grp.myPanel.groupOne.myEditText.text = "1000";                    }else{                       myPanel.grp.myPanel.groupOne.mySlider.value = Val;                    }                    //Make text fields the same if continuous is locked                    var contLocked = myPanel.grp.myPanel.groupThree.myCheckBox.value;                    if(contLocked == true){                                 myPanel.grp.myPanel.groupOne.mySlider3.value = myPanel.grp.myPanel.groupOne.mySlider.value;                                 myPanel.grp.myPanel.groupOne.myEditText3.text =  myPanel.grp.myPanel.groupOne.myEditText.text;                    }           }     //Out Speed Slider       myPanel.grp.myPanel.groupOne.mySlider3.onChange = function(){                    //reset the presets dropdown to null                   myPanel.grp.myPanel.groupPreset.myDropDownList.selection = null;                    var Val = myPanel.grp.myPanel.groupOne.mySlider3.value.toFixed(3);                    myPanel.grp.myPanel.groupOne.myEditText3.text = Val;                     //Make text fields the same if continuous is locked                    var contLocked = myPanel.grp.myPanel.groupThree.myCheckBox.value;                    if(contLocked == true){                                myPanel.grp.myPanel.groupOne.mySlider.value = myPanel.grp.myPanel.groupOne.mySlider3.value;                                 myPanel.grp.myPanel.groupOne.myEditText.text =  myPanel.grp.myPanel.groupOne.myEditText3.text;                    }           }       //Out Speed Text Field       myPanel.grp.myPanel.groupOne.myEditText3.onChange = function(){                    //reset the presets dropdown to null                   myPanel.grp.myPanel.groupPreset.myDropDownList.selection = null;                    var Val =(parseFloat(myPanel.grp.myPanel.groupOne.myEditText3.text)).toFixed(3);                     if(Val < -1000){                         myPanel.grp.myPanel.groupOne.mySlider3.value = -1000;                         myPanel.grp.myPanel.groupOne.myEditText3.text = "-1000";                    }else if(Val > 1000){                        myPanel.grp.myPanel.groupOne.mySlider3.value = 1000;                        myPanel.grp.myPanel.groupOne.myEditText3.text = "1000";                    }else{                          myPanel.grp.myPanel.groupOne.mySlider3.value = Val;                   }                    //Make text fields the same if continuous is locked                    var contLocked = myPanel.grp.myPanel.groupThree.myCheckBox.value;                    if(contLocked == true){                                myPanel.grp.myPanel.groupOne.mySlider.value = myPanel.grp.myPanel.groupOne.mySlider3.value;                                 myPanel.grp.myPanel.groupOne.myEditText.text =  myPanel.grp.myPanel.groupOne.myEditText3.text;                    }           }        //Out Influence Slider       myPanel.grp.myPanel.groupTwo.mySlider4.onChange = function(){                    //reset the presets dropdown to null                   myPanel.grp.myPanel.groupPreset.myDropDownList.selection = null;                    var Val = myPanel.grp.myPanel.groupTwo.mySlider4.value.toFixed(3);                    myPanel.grp.myPanel.groupTwo.myEditText4.text = Val;           }       //Out Influence Text Field       myPanel.grp.myPanel.groupTwo.myEditText4.onChange = function(){                   //reset the presets dropdown to null                   myPanel.grp.myPanel.groupPreset.myDropDownList.selection = null;                    var Val =(parseFloat(myPanel.grp.myPanel.groupTwo.myEditText4.text)).toFixed(3);                     if(Val < 0){                        myPanel.grp.myPanel.groupTwo.mySlider4.value = 0;                        myPanel.grp.myPanel.groupTwo.myEditText4.text = "0";                    }else if(Val > 100){                       myPanel.grp.myPanel.groupTwo.mySlider4.value = 100;                       myPanel.grp.myPanel.groupTwo.myEditText4.text = "100";                    }else{                          myPanel.grp.myPanel.groupTwo.mySlider4.value = Val;                    }           }         //In Influence Slider       myPanel.grp.myPanel.groupTwo.mySlider2.onChange = function(){                    //reset the presets dropdown to null                   myPanel.grp.myPanel.groupPreset.myDropDownList.selection = null;                    var Val = myPanel.grp.myPanel.groupTwo.mySlider2.value.toFixed(3);                    myPanel.grp.myPanel.groupTwo.myEditText2.text = Val;           }       //In Influence Text Field       myPanel.grp.myPanel.groupTwo.myEditText2.onChange = function(){                    //reset the presets dropdown to null                   myPanel.grp.myPanel.groupPreset.myDropDownList.selection = null;                    var Val =(parseFloat(myPanel.grp.myPanel.groupTwo.myEditText2.text)).toFixed(3);                    if(Val < 0){                        myPanel.grp.myPanel.groupTwo.mySlider2.value = 0;                        myPanel.grp.myPanel.groupTwo.myEditText2.text = "0";                    }else if(Val > 100){                        myPanel.grp.myPanel.groupTwo.mySlider2.value = 100;                        myPanel.grp.myPanel.groupTwo.myEditText2.text = "100";                    }else{                          myPanel.grp.myPanel.groupTwo.mySlider2.value = Val;                    }           }         myPanel.layout.layout(true);         return myPanel;      }      function onTabClicked() {         alert(this.text + " button clicked");      }      var myScriptPal = myScript_buildUI(thisObj);      if (myScriptPal != null && myScriptPal instanceof Window){         myScriptPal.center();         myScriptPal.show();      }   }   ts_KeyframeVelocity(this);}